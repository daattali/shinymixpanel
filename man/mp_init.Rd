% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mp_init.R
\name{mp_init}
\alias{mp_init}
\title{Set up a Shiny app to use Mixpanel for event tracking}
\usage{
mp_init(
  token,
  userid = "",
  options = list(),
  default_properties = list(),
  default_properties_js = list(),
  test_token = "",
  test_domains = list("127.0.0.1", "localhost"),
  track_client = TRUE,
  track_server = TRUE
)
}
\arguments{
\item{token}{The Mixpanel project token. If not provided, then an environment variable
\code{SHINYMIXPANEL_TOKEN} will be used.}

\item{userid}{A user ID to identify with Mixpanel on the current page. If provided, this user ID
will be associated with all event tracking calls. If the user ID is not known in the UI and
is only known in the server, call \code{\link[=mp_userid]{mp_userid()}} from the server.}

\item{options}{List of configuration options to pass to Mixpanel. A full list of supported
options is available in \href{https://developer.mixpanel.com/docs/javascript-full-api-reference#mixpanelset_config}{Mixpanel's documentation}.
See the examples below for sample usage.}

\item{default_properties}{List of properties to send with every event.}

\item{default_properties_js}{List of properties that need to be computed client-side (with JavaScript
in the user's browser) to send with every event. See the examples below for sample usage.}

\item{test_token}{A Mixpanel project token for a test project. Must be used together with \code{test_domains}.
See the section below on "Using a test Mixpanel project for testing/development".}

\item{test_domains}{List of domains where the \code{test_token} should be used. Must be used together
with \code{test_token}. See the section below on "Using a test Mixpanel project for testing/development".}

\item{track_client}{Whether to allow tracking via the web browser (client). Default is \code{TRUE}.
Note that an ad blocker may restrict the ability to use client-side tracking. See the section below on
"Client-side vs server-side tracking".}

\item{track_server}{Whether to allow tracking via R API calls (server). Default is \code{TRUE}.
See the section below on "Client-side vs server-side tracking".}
}
\description{
Call this function in a Shiny app's UI in order to initialize Mixpanel on the page. A project
token is required, which can either be provided using the \code{token} parameter or with the
\code{SHINYMIXPANEL_TOKEN} environment variable.\cr\cr
See the full \href{https://github.com/daattali/shinymixpanel#readme}{README} on
GitHub for more details.\cr\cr
}
\note{
Tracking can be temporarily disabled, for example while developing or testing, by setting
the \code{SHINYMIXPANEL_DISABLE} environment variable to \code{"1"}.
}
\section{Client-side vs server-side tracking}{

When calling \code{\link[=mp_track]{mp_track()}} inside a Shiny app, events data can be sent to Mixpanel in one of two ways: using client-side
or server-side tracking. When calling \code{\link[=mp_track]{mp_track()}} outside of Shiny, server-side is always used.\cr\cr
\strong{Client-side tracking} is done via the user's browser (with Javascript). This is
generally the preferred way to use Mixpanel, since Mixpanel automatically collects some additional information
from the web browser. However, some users may disable tracking in their browser (for example using an ad blocker),
and for these users it's not possible to perform client-side tracking.\cr\cr
With \strong{server-side tracking}, \{shinymixpanel\} will send events to Mixpanel via R API calls. The benefit of
server-side tracking is that it's unaffected by ad blockers. However, when using server-side tracking, Mixpanel
does not automatically collect the same attributes that it does in client-side. To compensate for that,
\{shinymixpanel\} will try to detect some browser data and send it along with any event: user's operating system,
browser name, screen size, and current URL (these are a subset of the attributes that client-side tracking detects).\cr\cr
The parameters \code{track_client} and \code{track_server} of \code{\link[=mp_init]{mp_init()}} are both set to \code{TRUE} by default, and they can be used to
disable one of the two tracking methods:
\itemize{
\item If both are set to \code{FALSE}, then Mixpanel tracking is essentially turned off
\item If only \code{track_client} is \code{TRUE}, then \{shinymixpanel\} will only attempt to use client-side tracking.
Note that this means that if the user has an ad blocker, then no events will be tracked.
\item If only \code{track_server} is \code{TRUE}, then all event tracking will be done with server-side tracking.
\item If both are \code{TRUE}, then \{shinymixpanel\} will prioritize trying to use client-side tracking. If an ad
blocker is present, then it will automatically switch to using server-side tracking.
}
}

\section{Using a test Mixpanel project for testing/development}{

While developing or testing your Shiny app, you can use the \code{SHINYMIXPANEL_DISABLE} envvar
to disable Mixpanel tracking. However, sometimes you may want to still have tracking but send the
data to a different "test" project rather than the real production Mixpanel project. The \{shinymixpanel\}
package supports this usecase via the \code{test_token} and \code{test_domains} parameters.\cr\cr
When both of these parameters are provided, if the Shiny app is in a domain that's listed in the
\code{test_domains} list, then data will be sent to the \code{test_token} project instead.
Note that the domains in \code{test_domains} are assumed to be suffixes. This means that if you provide
\code{"example.com"} as a test domain, then any user on \code{example.com} or \code{test.example.com} will use
the test project.\cr\cr
By default, \code{test_domains} is set to \verb{127.0.0.1} and \code{localhost}, which means that if you provide a
\code{test_token}, that project will receive all data while you're running the Shiny app locally.
}

\examples{
if (interactive()) {

  ### The simplest way to initialize Mixpanel is simply by calling `mp_init(token)`
  library(shiny)
  library(shinymixpanel)
  ui <- fluidPage(
    mp_init(YOUR_PROJECT_TOKEN)
  )

  server <- function(input, output, session) {
    mp_track("page init")
  }

  shinyApp(ui, server)

  ### The exapmle below shows how to use the many different parameters

  library(shiny)
  library(shinymixpanel)

  ui <- fluidPage(
    mp_init(
      YOUR_PROJECT_TOKEN,
      userid = "d24ba28c3",
      options = list(debug = TRUE),
      default_properties = list(foo = "bar", shiny_version = as.character(packageVersion("shiny"))),
      default_properties_js = list(size = "screen.width", ua = "navigator.userAgent"),
      test_token = TOKEN_FOR_TEST_PROJECT,
      test_domains = list("127.0.0.1", "internal.mycompany.com")
    )
  )

  server <- function(input, output, session) {
    mp_track("page init")
  }

  shinyApp(ui, server)
}
}
